import '../config/supabase_config.dart';
import 'session_management_service.dart';

class GameService {
  static final _client = SupabaseConfig.client;

  /// Pausar um jogo (alterar status para 'paused')
  static Future<bool> pauseGame({
    required String gameId,
  }) async {
    try {
      print('‚è∏Ô∏è Pausando jogo: $gameId');

      // 1. Pausar o jogo
      final response = await _client
          .from('games')
          .update({
            'status': 'paused',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', gameId)
          .select();

      if (response.isEmpty) {
        throw Exception('Jogo n√£o encontrado');
      }

      print('‚úÖ Jogo pausado com sucesso');

      // 2. Pausar todas as sess√µes ativas do jogo
      await _pauseGameSessions(gameId);

      return true;
    } catch (e) {
      print('‚ùå Erro ao pausar jogo: $e');
      rethrow;
    }
  }

  /// Reativar um jogo (alterar status para 'active')
  static Future<bool> resumeGame({
    required String gameId,
  }) async {
    try {
      print('‚ñ∂Ô∏è Reativando jogo: $gameId');

      // 1. Reativar o jogo
      final response = await _client
          .from('games')
          .update({
            'status': 'active',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', gameId)
          .select();

      if (response.isEmpty) {
        throw Exception('Jogo n√£o encontrado');
      }

      print('‚úÖ Jogo reativado com sucesso');

      // 2. Reativar todas as sess√µes pausadas do jogo
      await _resumeGameSessions(gameId);

      return true;
    } catch (e) {
      print('‚ùå Erro ao reativar jogo: $e');
      rethrow;
    }
  }

  /// Inativar um jogo (marcar como deletado e remover sess√µes futuras)
  static Future<bool> deleteGame({
    required String gameId,
  }) async {
    try {
      print('üóëÔ∏è Inativando jogo: $gameId');

      // 1. Remover apenas sess√µes futuras (preservar hist√≥rico)
      final removedSessions =
          await SessionManagementService.removeFutureGameSessions(gameId);
      print('‚úÖ $removedSessions sess√µes futuras removidas');

      // 2. Inativar relacionamentos jogador-jogo (marcar como inativos)
      final playersResponse = await _client
          .from('game_players')
          .update({
            'status': 'inactive',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('game_id', gameId)
          .eq('status', 'confirmed')
          .select();

      print(
          '‚úÖ ${playersResponse.length} relacionamentos jogador-jogo inativados');

      // 3. Marcar o jogo como deletado (n√£o deletar fisicamente)
      final response = await _client
          .from('games')
          .update({
            'status': 'deleted',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', gameId)
          .select();

      if (response.isEmpty) {
        throw Exception('Jogo n√£o encontrado');
      }

      print('‚úÖ Jogo inativado com sucesso (hist√≥rico preservado)');
      return true;
    } catch (e) {
      print('‚ùå Erro ao inativar jogo: $e');
      rethrow;
    }
  }

  /// Reativar um jogo deletado (marcar como ativo e recriar sess√µes futuras)
  static Future<bool> reactivateGame({
    required String gameId,
  }) async {
    try {
      print('üîÑ Reativando jogo deletado: $gameId');

      // 1. Reativar relacionamentos jogador-jogo (marcar como confirmados)
      final playersResponse = await _client
          .from('game_players')
          .update({
            'status': 'confirmed',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('game_id', gameId)
          .eq('status', 'inactive')
          .select();

      print(
          '‚úÖ ${playersResponse.length} relacionamentos jogador-jogo reativados');

      // 2. Marcar o jogo como ativo
      final response = await _client
          .from('games')
          .update({
            'status': 'active',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', gameId)
          .select();

      if (response.isEmpty) {
        throw Exception('Jogo n√£o encontrado');
      }

      print('‚úÖ Jogo reativado com sucesso');

      // 3. Recriar sess√µes futuras baseadas nas configura√ß√µes do jogo
      try {
        print('üîÑ Recriando sess√µes futuras para o jogo reativado...');
        final gameData = response.first;
        final sessionResult =
            await SessionManagementService.recreateGameSessions(
                gameId, gameData);

        if (sessionResult['success']) {
          print(
              '‚úÖ ${sessionResult['created_sessions']} sess√µes futuras recriadas');
        } else {
          print('‚ö†Ô∏è Erro ao recriar sess√µes: ${sessionResult['error']}');
        }
      } catch (sessionError) {
        print('‚ö†Ô∏è Erro ao recriar sess√µes: $sessionError');
        // N√£o falha a reativa√ß√£o do jogo se houver erro nas sess√µes
      }

      return true;
    } catch (e) {
      print('‚ùå Erro ao reativar jogo: $e');
      rethrow;
    }
  }

  /// Verificar se o usu√°rio √© administrador do jogo
  static Future<bool> isUserGameAdmin({
    required String gameId,
    required String userId,
  }) async {
    try {
      // Buscar o player_id do usu√°rio
      final playerResponse = await _client
          .from('players')
          .select('id')
          .eq('user_id', userId)
          .maybeSingle();

      if (playerResponse == null) {
        return false;
      }

      final playerId = playerResponse['id'];

      // Verificar se √© administrador na tabela game_players
      final gamePlayerResponse = await _client
          .from('game_players')
          .select('is_admin')
          .eq('game_id', gameId)
          .eq('player_id', playerId)
          .inFilter('status', ['active', 'confirmed']).maybeSingle();

      if (gamePlayerResponse != null &&
          gamePlayerResponse['is_admin'] == true) {
        return true;
      }

      // Fallback: verificar se √© o criador do jogo
      final gameResponse = await _client
          .from('games')
          .select('user_id')
          .eq('id', gameId)
          .maybeSingle();

      if (gameResponse == null) {
        return false;
      }

      return gameResponse['user_id'] == userId;
    } catch (e) {
      print('‚ùå Erro ao verificar se usu√°rio √© administrador do jogo: $e');
      return false;
    }
  }

  /// Obter informa√ß√µes do jogo
  static Future<Map<String, dynamic>?> getGameInfo({
    required String gameId,
  }) async {
    try {
      final response = await _client
          .from('games')
          .select('*')
          .eq('id', gameId)
          .maybeSingle();

      return response;
    } catch (e) {
      print('‚ùå Erro ao obter informa√ß√µes do jogo: $e');
      return null;
    }
  }

  /// Verificar se o jogo pode ser pausado
  static Future<bool> canPauseGame({
    required String gameId,
  }) async {
    try {
      final gameInfo = await getGameInfo(gameId: gameId);

      if (gameInfo == null) {
        return false;
      }

      final status = gameInfo['status'] as String?;
      return status == 'active';
    } catch (e) {
      print('‚ùå Erro ao verificar se jogo pode ser pausado: $e');
      return false;
    }
  }

  /// Verificar se o jogo pode ser reativado
  static Future<bool> canResumeGame({
    required String gameId,
  }) async {
    try {
      final gameInfo = await getGameInfo(gameId: gameId);

      if (gameInfo == null) {
        return false;
      }

      final status = gameInfo['status'] as String?;
      return status == 'paused';
    } catch (e) {
      print('‚ùå Erro ao verificar se jogo pode ser reativado: $e');
      return false;
    }
  }

  /// Verificar se o jogo pode ser inativado
  static Future<bool> canDeleteGame({
    required String gameId,
  }) async {
    try {
      final gameInfo = await getGameInfo(gameId: gameId);

      if (gameInfo == null) {
        return false;
      }

      final status = gameInfo['status'] as String?;
      return status != 'deleted';
    } catch (e) {
      print('‚ùå Erro ao verificar se jogo pode ser inativado: $e');
      return false;
    }
  }

  /// Verificar se o jogo pode ser reativado (deletado -> ativo)
  static Future<bool> canReactivateGame({
    required String gameId,
  }) async {
    try {
      final gameInfo = await getGameInfo(gameId: gameId);

      if (gameInfo == null) {
        return false;
      }

      final status = gameInfo['status'] as String?;
      return status == 'deleted';
    } catch (e) {
      print('‚ùå Erro ao verificar se jogo pode ser reativado: $e');
      return false;
    }
  }

  /// Verificar se o jogo est√° ativo (n√£o deletado)
  static Future<bool> isGameActive({
    required String gameId,
  }) async {
    try {
      final gameInfo = await getGameInfo(gameId: gameId);

      if (gameInfo == null) {
        return false;
      }

      final status = gameInfo['status'] as String?;
      return status != 'deleted';
    } catch (e) {
      print('‚ùå Erro ao verificar se jogo est√° ativo: $e');
      return false;
    }
  }

  /// Pausar todas as sess√µes ativas de um jogo
  static Future<void> _pauseGameSessions(String gameId) async {
    try {
      print('‚è∏Ô∏è Pausando sess√µes do jogo: $gameId');

      final response = await _client
          .from('game_sessions')
          .update({
            'status': 'paused',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('game_id', gameId)
          .eq('status', 'active')
          .select();

      print('‚úÖ ${response.length} sess√µes pausadas com sucesso');
    } catch (e) {
      print('‚ùå Erro ao pausar sess√µes do jogo: $e');
      rethrow;
    }
  }

  /// Reativar todas as sess√µes pausadas de um jogo (apenas pr√≥ximas sess√µes)
  static Future<void> _resumeGameSessions(String gameId) async {
    try {
      print('‚ñ∂Ô∏è Reativando pr√≥ximas sess√µes do jogo: $gameId');

      // Obter data atual para filtrar apenas sess√µes futuras
      final today = DateTime.now();
      final todayString =
          '${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}';

      print('üîç Data atual para filtro: $todayString');

      final response = await _client
          .from('game_sessions')
          .update({
            'status': 'active',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('game_id', gameId)
          .eq('status', 'paused')
          .gte('session_date', todayString) // Apenas sess√µes futuras ou de hoje
          .select();

      print('‚úÖ ${response.length} pr√≥ximas sess√µes reativadas com sucesso');

      // Log das sess√µes reativadas
      for (var session in response) {
        print(
            '   üìÖ Sess√£o reativada: ${session['session_date']} - ${session['start_time']}');
      }
    } catch (e) {
      print('‚ùå Erro ao reativar sess√µes do jogo: $e');
      rethrow;
    }
  }

  /// Pausar uma sess√£o espec√≠fica
  static Future<bool> pauseSession({
    required String sessionId,
  }) async {
    try {
      print('‚è∏Ô∏è Pausando sess√£o: $sessionId');

      final response = await _client
          .from('game_sessions')
          .update({
            'status': 'paused',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', sessionId)
          .eq('status', 'active')
          .select();

      if (response.isEmpty) {
        throw Exception('Sess√£o n√£o encontrada ou j√° pausada');
      }

      print('‚úÖ Sess√£o pausada com sucesso');
      return true;
    } catch (e) {
      print('‚ùå Erro ao pausar sess√£o: $e');
      rethrow;
    }
  }

  /// Reativar uma sess√£o espec√≠fica
  static Future<bool> resumeSession({
    required String sessionId,
  }) async {
    try {
      print('‚ñ∂Ô∏è Reativando sess√£o: $sessionId');

      final response = await _client
          .from('game_sessions')
          .update({
            'status': 'active',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', sessionId)
          .eq('status', 'paused')
          .select();

      if (response.isEmpty) {
        throw Exception('Sess√£o n√£o encontrada ou j√° ativa');
      }

      print('‚úÖ Sess√£o reativada com sucesso');
      return true;
    } catch (e) {
      print('‚ùå Erro ao reativar sess√£o: $e');
      rethrow;
    }
  }

  /// Cancelar uma sess√£o espec√≠fica
  static Future<bool> cancelSession({
    required String sessionId,
  }) async {
    try {
      print('‚ùå Cancelando sess√£o: $sessionId');

      final response = await _client
          .from('game_sessions')
          .update({
            'status': 'cancelled',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', sessionId)
          .inFilter('status', ['active', 'paused'])
          .select();

      if (response.isEmpty) {
        throw Exception('Sess√£o n√£o encontrada ou j√° cancelada');
      }

      print('‚úÖ Sess√£o cancelada com sucesso');
      return true;
    } catch (e) {
      print('‚ùå Erro ao cancelar sess√£o: $e');
      rethrow;
    }
  }

  /// Marcar uma sess√£o como conclu√≠da
  static Future<bool> completeSession({
    required String sessionId,
  }) async {
    try {
      print('‚úÖ Marcando sess√£o como conclu√≠da: $sessionId');

      final response = await _client
          .from('game_sessions')
          .update({
            'status': 'completed',
            'updated_at': DateTime.now().toIso8601String(),
          })
          .eq('id', sessionId)
          .inFilter('status', ['active', 'paused'])
          .select();

      if (response.isEmpty) {
        throw Exception('Sess√£o n√£o encontrada ou j√° conclu√≠da');
      }

      print('‚úÖ Sess√£o marcada como conclu√≠da com sucesso');
      return true;
    } catch (e) {
      print('‚ùå Erro ao marcar sess√£o como conclu√≠da: $e');
      rethrow;
    }
  }
}
