import '../config/supabase_config.dart';

class SessionManagementService {
  /// Remove todas as sess√µes existentes de um jogo
  static Future<int> removeAllGameSessions(String gameId) async {
    try {
      print('üóëÔ∏è Removendo sess√µes existentes do jogo $gameId...');

      // Primeiro, contar quantas sess√µes ser√£o removidas
      final countResponse = await SupabaseConfig.client
          .from('game_sessions')
          .select('id')
          .eq('game_id', gameId);

      final sessionCount = countResponse.length;

      if (sessionCount == 0) {
        print('‚ÑπÔ∏è Nenhuma sess√£o encontrada para remover');
        return 0;
      }

      // Remover todas as sess√µes
      await SupabaseConfig.client
          .from('game_sessions')
          .delete()
          .eq('game_id', gameId);

      print('‚úÖ Removidas $sessionCount sess√µes do jogo $gameId');
      return sessionCount;
    } catch (e) {
      print('‚ùå Erro ao remover sess√µes: $e');
      rethrow;
    }
  }

  /// Cria novas sess√µes baseadas nas configura√ß√µes do jogo
  static Future<List<Map<String, dynamic>>> createNewSessions(
      Map<String, dynamic> gameData) async {
    try {
      print(
          'üìÖ Criando novas sess√µes para jogo com frequ√™ncia: ${gameData['frequency']}');

      final String frequency = gameData['frequency'] ?? 'Jogo Avulso';

      // Se for jogo avulso, criar apenas uma sess√£o
      if (frequency == 'Jogo Avulso') {
        return await _createSingleSession(gameData);
      }

      // Para jogos com frequ√™ncia, criar m√∫ltiplas sess√µes
      return await _createRecurringSessions(gameData);
    } catch (e) {
      print('‚ùå Erro ao criar novas sess√µes: $e');
      rethrow;
    }
  }

  /// Cria uma sess√£o √∫nica (jogo avulso)
  static Future<List<Map<String, dynamic>>> _createSingleSession(
      Map<String, dynamic> gameData) async {
    try {
      final sessionData = {
        'game_id': gameData['id'],
        'session_date': gameData['game_date'] ?? _formatDate(DateTime.now()),
        'start_time': gameData['start_time'],
        'end_time': gameData['end_time'],
        'status': 'scheduled'
      };

      final response = await SupabaseConfig.client
          .from('game_sessions')
          .insert([sessionData]).select();

      print('‚úÖ Sess√£o avulsa criada: ${response.first['id']}');
      return response;
    } catch (e) {
      print('‚ùå Erro ao criar sess√£o avulsa: $e');
      rethrow;
    }
  }

  /// Cria sess√µes recorrentes baseadas na frequ√™ncia
  static Future<List<Map<String, dynamic>>> _createRecurringSessions(
      Map<String, dynamic> gameData) async {
    try {
      final dayOfWeek = _getDayOfWeekNumber(gameData['day_of_week']);
      final frequency = gameData['frequency'];

      // Calcular a pr√≥xima data v√°lida baseada na data atual e no dia da semana
      final currentDate = _calculateNextValidDate(dayOfWeek);

      print(
          'üìÖ Pr√≥xima data v√°lida calculada: ${_formatDate(currentDate)} (${_getDayName(dayOfWeek)})');

      final sessions = <Map<String, dynamic>>[];
      final maxSessions = _getMaxSessionsForFrequency(frequency);

      // Criar sess√µes baseadas na frequ√™ncia
      DateTime sessionDate = currentDate;
      for (int i = 0; i < maxSessions; i++) {
        sessions.add({
          'game_id': gameData['id'],
          'session_date': _formatDate(sessionDate),
          'start_time': gameData['start_time'],
          'end_time': gameData['end_time'],
          'status': 'scheduled'
        });

        // Calcular pr√≥xima data baseada na frequ√™ncia
        sessionDate = _calculateNextDate(sessionDate, frequency);
      }

      // Inserir todas as sess√µes de uma vez
      final response = await SupabaseConfig.client
          .from('game_sessions')
          .insert(sessions)
          .select();

      print(
          '‚úÖ ${response.length} sess√µes recorrentes criadas para o jogo ${gameData['id']}');
      return response;
    } catch (e) {
      print('‚ùå Erro ao criar sess√µes recorrentes: $e');
      rethrow;
    }
  }

  /// Recria todas as sess√µes de um jogo (remove existentes e cria novas)
  static Future<Map<String, dynamic>> recreateGameSessions(
      String gameId, Map<String, dynamic> gameData) async {
    try {
      print('üîÑ Iniciando recria√ß√£o de sess√µes para o jogo $gameId...');

      // Remover todas as sess√µes existentes
      final removedCount = await removeAllGameSessions(gameId);

      // Criar novas sess√µes baseadas nos dados atuais
      final newSessions = await createNewSessions(gameData);

      print(
          '‚úÖ Recria√ß√£o conclu√≠da: $removedCount removidas, ${newSessions.length} criadas');

      return {
        'game_id': gameId,
        'removed_sessions': removedCount,
        'created_sessions': newSessions.length,
        'success': true,
        'message':
            'Sess√µes recriadas com sucesso: $removedCount removidas, ${newSessions.length} criadas'
      };
    } catch (e) {
      print('‚ùå Erro na recria√ß√£o de sess√µes: $e');
      return {
        'game_id': gameId,
        'success': false,
        'error': e.toString(),
        'message': 'Erro ao recriar sess√µes: $e'
      };
    }
  }

  /// Retorna o n√∫mero m√°ximo de sess√µes baseado na frequ√™ncia
  static int _getMaxSessionsForFrequency(String frequency) {
    switch (frequency) {
      case 'Di√°ria':
        return 30; // 1 m√™s
      case 'Semanal':
        return 52; // 1 ano
      case 'Mensal':
        return 12; // 1 ano
      case 'Anual':
        return 5; // 5 anos
      default:
        return 52; // Padr√£o: 1 ano
    }
  }

  /// Calcula a pr√≥xima data baseada na frequ√™ncia
  static DateTime _calculateNextDate(DateTime currentDate, String frequency) {
    switch (frequency) {
      case 'Di√°ria':
        return currentDate.add(const Duration(days: 1));
      case 'Semanal':
        return currentDate.add(const Duration(days: 7));
      case 'Mensal':
        return DateTime(
            currentDate.year, currentDate.month + 1, currentDate.day);
      case 'Anual':
        return DateTime(
            currentDate.year + 1, currentDate.month, currentDate.day);
      default:
        return currentDate.add(const Duration(days: 7)); // Padr√£o semanal
    }
  }

  /// Converte dia da semana para n√∫mero (1=Segunda, 7=Domingo)
  /// Aceita tanto formato completo ('Quinta-feira') quanto abreviado ('Quinta')
  static int _getDayOfWeekNumber(String? dayName) {
    if (dayName == null) return 1; // Padr√£o: Segunda-feira

    // Normalizar o nome do dia (remover espa√ßos e converter para min√∫sculo)
    final normalizedDay = dayName.toLowerCase().trim();

    // Mapear formatos completos e abreviados
    switch (normalizedDay) {
      // Formato completo
      case 'segunda-feira':
      case 'segunda':
        return 1;
      case 'ter√ßa-feira':
      case 'ter√ßa':
        return 2;
      case 'quarta-feira':
      case 'quarta':
        return 3;
      case 'quinta-feira':
      case 'quinta':
        return 4;
      case 'sexta-feira':
      case 'sexta':
        return 5;
      case 's√°bado':
        return 6;
      case 'domingo':
        return 7;
      default:
        print(
            '‚ö†Ô∏è Dia da semana n√£o reconhecido: "$dayName" - usando Segunda-feira como padr√£o');
        return 1; // Padr√£o: Segunda-feira
    }
  }

  /// Calcula a pr√≥xima data v√°lida baseada no dia da semana
  /// Se hoje √© 16/09/2025 (segunda-feira) e o jogo √© √†s quintas-feiras,
  /// retorna 18/09/2025 (quinta-feira)
  static DateTime _calculateNextValidDate(int targetDayOfWeek) {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);

    // Se hoje j√° √© o dia correto, usar a pr√≥xima ocorr√™ncia
    int daysToAdd = targetDayOfWeek - today.weekday;

    // Se o dia j√° passou esta semana, ir para a pr√≥xima semana
    if (daysToAdd <= 0) {
      daysToAdd += 7;
    }

    final nextValidDate = today.add(Duration(days: daysToAdd));

    print('üìÖ C√°lculo da pr√≥xima data v√°lida:');
    print('   Hoje: ${_formatDate(today)} (${_getDayName(today.weekday)})');
    print('   Dia alvo: ${_getDayName(targetDayOfWeek)}');
    print(
        '   Pr√≥xima data: ${_formatDate(nextValidDate)} (${_getDayName(nextValidDate.weekday)})');

    return nextValidDate;
  }

  /// Retorna o nome do dia da semana baseado no n√∫mero
  static String _getDayName(int dayOfWeek) {
    switch (dayOfWeek) {
      case 1:
        return 'Segunda-feira';
      case 2:
        return 'Ter√ßa-feira';
      case 3:
        return 'Quarta-feira';
      case 4:
        return 'Quinta-feira';
      case 5:
        return 'Sexta-feira';
      case 6:
        return 'S√°bado';
      case 7:
        return 'Domingo';
      default:
        return 'Dia inv√°lido';
    }
  }

  /// Formata data para o formato YYYY-MM-DD
  static String _formatDate(DateTime date) {
    return '${date.year.toString().padLeft(4, '0')}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
  }
}
